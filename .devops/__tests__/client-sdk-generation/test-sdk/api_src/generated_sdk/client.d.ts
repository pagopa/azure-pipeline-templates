/**
 * Do not edit this file it is auto-generated by io-utils / gen-api-models.
 * See https://github.com/pagopa/io-utils
 */
import { RequestParams, TypeofApiCall, TypeofApiParams, ReplaceRequestParams } from "italia-ts-commons/lib/requests";
import { GetServerInfoT } from "./requestTypes";
declare type __UNDEFINED_KEY = "_____";
export declare type ApiOperation = TypeofApiCall<GetServerInfoT>;
export declare type ParamKeys = keyof TypeofApiParams<GetServerInfoT>;
/**
 * Defines an adapter for TypeofApiCall which omit one or more parameters in the signature
 * @param ApiT the type which defines the operation to expose
 * @param K the parameter to omit. undefined means no parameters will be omitted
 */
export declare type OmitApiCallParams<ApiT, K extends ParamKeys | __UNDEFINED_KEY = __UNDEFINED_KEY> = (op: TypeofApiCall<ApiT>) => K extends __UNDEFINED_KEY ? TypeofApiCall<ApiT> : TypeofApiCall<ReplaceRequestParams<ApiT, Omit<RequestParams<ApiT>, K>>>;
/**
 * Defines an adapter for TypeofApiCall which omit one or more parameters in the signature
 * @param ApiT the type which defines the operation to expose
 * @param K the parameter to omit. undefined means no parameters will be omitted
 */
export declare type WithDefaultsT<K extends ParamKeys | __UNDEFINED_KEY = __UNDEFINED_KEY> = OmitApiCallParams<GetServerInfoT, K>;
/**
 * Defines a collection of api operations
 * @param K name of the parameters that the Clients masks from the operations
 */
export declare type Client<K extends ParamKeys | __UNDEFINED_KEY = __UNDEFINED_KEY> = K extends __UNDEFINED_KEY ? {
    readonly getServerInfo: TypeofApiCall<GetServerInfoT>;
} : {
    readonly getServerInfo: TypeofApiCall<ReplaceRequestParams<GetServerInfoT, Omit<RequestParams<GetServerInfoT>, K>>>;
};
/**
 * Create an instance of a client
 * @param params hash map of parameters thata define the client:
 *  - baseUrl: the base url for every api call (required)
 *  - fetchApi: an implementation of the fetch() web API, depending on the platform (required)
 *  - basePath: optional path to be appended to the baseUrl
 *  - withDefaults: optional adapter to be applied to every operation, to omit some paramenters
 * @returns a collection of api operations
 */
export declare function createClient<K extends ParamKeys>(params: {
    baseUrl: string;
    fetchApi: typeof fetch;
    withDefaults: WithDefaultsT<K>;
    basePath?: string;
}): Client<K>;
export declare function createClient(params: {
    baseUrl: string;
    fetchApi: typeof fetch;
    withDefaults?: undefined;
    basePath?: string;
}): Client;
export {};
