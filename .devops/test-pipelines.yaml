# Azure DevOps pipeline to test pipeline templates
# Each stage is dedicated to a template. Each job of a stage is a test.
#
#
#
# Note:
#
# A VerdaccioSimpleUserSC Service connection is needed for Test_ClientSDKGeneration 
# It must be set with the following parameters:
#  - registry: http://localhost:4873
#  - username: user
#  - password: psw



# Automatically triggered on PR
# https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema?view=azure-devops&tabs=schema%2Cparameter-schema#pr-trigger
trigger: none

# Execute agents (jobs) on latest Ubuntu version.
# To change OS for a specific, ovverride "pool" attribute inside the job definition
pool:
  vmImage: 'ubuntu-latest'

stages:
  - stage: Test_NodeJobSetup
    dependsOn: []
    jobs:
      # Test that the job is setup with a provided Node version
      - job: test_provided_node_version      
        steps:
        # use template  
        - template: ../templates/node-job-setup/template.yaml
          parameters:
            projectDir: '.devops/__tests__/sample-node-app'
            nodeVersion: '12.6.0'
        # test results    
        - script: |
            if [[ $(node -v) = 'v12.6.0' ]]; then
              echo "Node version correcly set"
              exit 0
            else 
              echo "Wrong Node version set, received: $(node -v)"
              exit 0
            fi
          displayName: 'Test'

      # Test that the job is setup and Node version is inferred from the app source
      - job: test_inferred_node_version      
        steps:
        # use template  
        - template: ../templates/node-job-setup/template.yaml
          parameters:
            projectDir: '.devops/__tests__/sample-node-app'
        # test results    
        - script: |
            if [[ $(node -v) = 'v14.1.0' ]]; then
              echo "Node version correcly set"
              exit 0
            else 
              echo "Wrong Node version set, received: $(node -v)"
              exit 0
            fi
          displayName: 'Test'

      # Test that packages are been installed
      - job: test_installed_packages
        steps:
        # use template  
        - template: ../templates/node-job-setup/template.yaml
          parameters:
            projectDir: '.devops/__tests__/sample-node-app'
        # test results    
        - script: |
            # a dummy package we expect to be installed
            expectedPackage="./node_modules/strings"
            if [[ -d $expectedPackage ]]; then
              echo "Node packages correctly installed"
              exit 0
            else 
              echo "Failed to install packages"
              exit 0
            fi
          displayName: 'Test'


  - stage: Test_ClientSDKGeneration
    dependsOn: []
    jobs:
    
      # Test that the job is setup with a provided Node version
      - job: Test_SDK_Generation    
        variables:
          verdaccioUrl: 'http://localhost:4873'  
        
        steps:
        - checkout: self

        # ----------------------------------------------------------------------------------------
        # Test - Arrange 
        # ----------------------------------------------------------------------------------------
        
        #Start Verdaccio
        - script: |
            docker run -d --rm --name verdaccio -p 4873:4873 verdaccio/verdaccio 
            sleep 5
          displayName: 'Start verdaccio'
        
        #Using 'sleep (n)' to fake user input
        - script: |
            { echo "user"; sleep 5; echo "psw"; sleep 5; echo "test@pagopa.it"; sleep 5; } | npm adduser --registry ${{ variables.verdaccioUrl }}
          displayName: 'Create verdaccio user'
          workingDirectory: .devops/__tests__/client-sdk-generation/test-sdk/api_src


        #Start simple API that implements openapi spec
        - script: |
            yarn install && yarn build && yarn start
          displayName: 'Start simple API for testing'
          workingDirectory: .devops/__tests__/client-sdk-generation/test-sdk/api_src

        # ----------------------------------------------------------------------------------------
        # Test - Act 
        # ----------------------------------------------------------------------------------------

        #Call The template to generate SDK package and publish it to Verdaccio
        - template: ../templates/client-sdk-release/template.yaml
          parameters:
            projectDir: .devops/__tests__/client-sdk-generation/test-sdk/api_src
            openapiSpecPath: ../api_test.yaml
            isTestEnvironment: true
            npmRegistry: ${{ variables.verdaccioUrl }}

        # ----------------------------------------------------------------------------------------
        # Test - Assert 
        # ----------------------------------------------------------------------------------------

        #Install SDK from verdaccio
        - script: |
            cp use.npmrc .npmrc
            cp jest.config.js_use jest.config.js
            yarn install
          displayName: 'it should download it from registy'
          workingDirectory: .devops/__tests__/client-sdk-generation/test-sdk/client_src

        # Test node_modules folder content    
        - script: |
            expectedPackage="./node_modules/@pagopa/api_test-sdk"
            if [[ -d $expectedPackage ]]; then exit 0; else echo "package not found"; exit 1; fi

            files=("package.json" "openapi.yaml" "client.js" "ServerInfo.js" )
            for file in "${files[@]}"; do
                if [[ -f $expectedPackage/${file} ]]; then echo "File ${file} fould!"; else echo "File ${file} not fould!"; exit 1; fi
            done

          displayName: 'it should contains @pagopa/api_test-sdk package and expected files'
          workingDirectory: .devops/__tests__/client-sdk-generation/test-sdk/client_src

        #Build the code that uses the SDK
        - script: |
            yarn build
          displayName: 'it should build the code that uses the generated SDK'
          workingDirectory: .devops/__tests__/client-sdk-generation/test-sdk/client_src

        #Call the API using the SDK
        - script: |
            yarn test
          displayName: 'it should call the api and receive the expected result'
          workingDirectory: .devops/__tests__/client-sdk-generation/test-sdk/client_src
