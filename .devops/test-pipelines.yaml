# Azure DevOps pipeline to test pipeline templates
# Each stage is dedicated to a template. Each job of a stage is a test.
#
#
# Note:
#
# A 'npm-verdaccio' Service Connection is needed for Test_ClientSDKGeneration 
# It must be set with the following parameters:
#  - registry: http://localhost:4873
#  - username: user
#  - password: psw
variables:
  system.debug: true


parameters:
  # A set of agents to execute test against.
  #  Key is an arbitrary string (avoid using `-`)
  #  Value is the name of the vm to test against
  - name: 'vmToTestOn'
    type: 'object'
    default: []

# Automatically triggered on PR
# https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema?view=azure-devops&tabs=schema%2Cparameter-schema#pr-trigger
trigger: none

stages:
  # Stages are applied on every VM we support, to ensure templates work well on each
  - ${{ each vm in parameters.vmToTestOn }}:
    - stage: Test_NodeJobSetup_on_${{ vm.Key }}
      dependsOn: []
      jobs:
        # Test that the job is setup with a provided Node version
        - job: test_provided_node_version
          pool:
            vmImage: '${{ vm.Value }}'
          steps:
          # use template  
          - template: ../templates/node-job-setup/template.yaml
            parameters:
              projectDir: '.devops/__tests__/sample-node-app'
              nodeVersion: '12.6.0'
          # test results    
          - bash: |
              if [[ $(node -v) = 'v12.6.0' ]]; then
                echo "Node version correcly set"
                exit 0
              else 
                echo "Wrong Node version set, received: $(node -v)"
                exit 1
              fi
            displayName: 'Test'

        # Test that the job is setup and Node version is inferred from the app source
        - job: test_inferred_node_version   
          pool:
            vmImage: '${{ vm.Value }}'   
          steps:
          # use template  
          - template: ../templates/node-job-setup/template.yaml
            parameters:
              projectDir: '.devops/__tests__/sample-node-app'
          # test results    
          - bash: |
              if [[ $(node -v) = 'v14.1.0' ]]; then
                echo "Node version correcly set"
                exit 0
              else 
                echo "Wrong Node version set, received: $(node -v)"
                exit 1
              fi
            displayName: 'Test'

        # Test that packages are been installed
        - job: test_installed_packages
          pool:
            vmImage: '${{ vm.Value }}'
          steps:
          # use template  
          - template: ../templates/node-job-setup/template.yaml
            parameters:
              projectDir: '.devops/__tests__/sample-node-app'
          # test results    
          - bash: |
              echo "current folder: $(pwd)"
              # a dummy package we expect to be installed
              expectedPackage="./node_modules/stringz"
              ls $expectedPackage && echo "package found" || echo "package not found"
              if [[ -d $expectedPackage ]]; then
                echo "Node packages correctly installed"
                exit 0
              else 
                echo "Failed to install packages"
                exit 1
              fi
              # run sample app
              # if more extensive test
              node index.js && echo "test ok" || echo "test not ok"
            workingDirectory: '.devops/__tests__/sample-node-app'
            displayName: 'Test package are installed'
          - bash: |
              echo "current folder: $(pwd)"
              # run sample app
              # index.js runs a script that ensure the app is correctly set up 
              node index.js
            workingDirectory: '.devops/__tests__/sample-node-app'
            displayName: 'Test sample app is working'





  - stage: Test_Yarn_Lock_File_Upgrade
    dependsOn: []
    
    jobs:

      - job: do_yarn_lock_upgrade
        pool:
          vmImage: ubuntu-latest   
        steps:

        #Call the Yarn.lock updated the first time
        - template: ../templates/yarn-lock-upgrade/template.yaml
          parameters:
            projectDir: .devops/__tests__/sample-yarn-upgrade

        - script: |
            #setup hub CLI
            echo "github.com: 
            - user: $GITHUB_USERNAME
              oauth_token: $(GITHUB_TOKEN)" > ~/.config/hub

            PR_NUMBER=`hub pr list | grep "\[Yarn.lock Upgrade\]" | awk '{print $1}' | sed 's/#//'`
            echo "##vso[task.setvariable variable=pr_number]$PR_NUMBER"
            echo "==> PR $PR_NUMBER"
            if [[ -n "$PR_NUMBER" ]]; then exit 0; else echo "PR Not Found"; exit 1; fi
          displayName: 'it should open a PR'



      - job: do_yarn_lock_upgrade
        
        pool:
          vmImage: ubuntu-latest   
        steps:

        #Call it again, when a PR is open
        - template: ../templates/yarn-lock-upgrade/template.yaml
          parameters:
            projectDir: .devops/__tests__/sample-yarn-upgrade

        - script: |
            #setup hub CLI
            echo "github.com: 
            - user: $GITHUB_USERNAME
              oauth_token: $(GITHUB_TOKEN)" > ~/.config/hub

            OPEN_PR_NR=`hub pr list | grep "\[Yarn.lock Upgrade\]" | wc -l`
            if [[ "$OPEN_PR_NR" == 2 ]]; then echo "It opened a new PR instead of using the same one"; exit 1; else exit 0; fi
          displayName: 'it should not open a new PR, if present'
      
        - script: |
            hub issue update $(pr_number) -s closed   
            echo "" > ~/.config/hub
          displayName: Cleanup
