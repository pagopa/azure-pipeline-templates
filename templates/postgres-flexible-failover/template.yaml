# Run terraform init and terraform plan
parameters:
  - name: 'TF_AZURE_APPLY_SERVICE_CONNECTION_NAME'
    displayName: '(Required) Azure service connection name.'
    type: string
  - name: 'WORKINGDIR'
    displayName: '(Optional) Working direcory containing terraform templates and the terraform.sh helper.'
    type: string
    default: "src"
  - name: 'TF_DNS_ZONE_NAME'
    displayName: '(Required) private dns zone name to update'
    type: string
  - name: 'TF_DNS_ZONE_RG_NAME'
    displayName: '(Required) private dns zone resource group name to update'
    type: string
  - name: 'TF_DNS_ZONE_RECORD_NAME'
    displayName: '(Required) private dns zone record name to update'
    type: string
  - name: 'TF_FAILOVER_DB_RG'
    displayName: '(Required) Failover database resource group name'
    type: string
  - name: 'TF_FAILOVER_DB_NAME'
    displayName: '(Required) Failover database name'
    type: string
  - name: 'TF_FAILOVER_TYPE'
    displayName: '(Optional) Failover type: forced or planned'
    type: string
    default: "Planned"


steps:
  - checkout: self

  - task: AzureCLI@2
    displayName: Postgres failover
    inputs:
      azureSubscription: '${{ parameters.TF_AZURE_APPLY_SERVICE_CONNECTION_NAME}}'
      addSpnToEnvironment: true
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      failOnStandardError: true
      workingDirectory: '${{ parameters.WORKINGDIR }}'
      inlineScript: |
        echo "##ðŸ’ˆ Start postgres failover procedure"

        export cliendId=$(az ad sp show --id ${servicePrincipalId} --query "appId" -o tsv)

        export ARM_USE_OIDC=true
        export ARM_OIDC_TOKEN=${idToken}
        export ARM_CLIENT_ID=${cliendId}
        export ARM_SUBSCRIPTION_ID=$(az account show --query id --output tsv)
        export ARM_TENANT_ID=$(az account show --query tenantId --output tsv)
        
        FAILOVER_DB_FQDN=$(az postgres flexible-server show  -n ${{ parameters.TF_FAILOVER_DB_NAME}} -g ${{ parameters.TF_FAILOVER_DB_RG}}  | jq -r '.fullyQualifiedDomainName')
        echo "failover db fqdn $FAILOVER_DB_FQDN"
        
        if [ -z "$FAILOVER_DB_FQDN" ]
        then
          echo "ERROR failover fqdn not found. stopping"
          exit 1
        fi
        
        echo "triggering failover: az postgres flexible-server replica stop-replication -g ${{ parameters.TF_FAILOVER_DB_RG}} -n ${{ parameters.TF_FAILOVER_DB_NAME}} -y"
        az postgres flexible-server replica stop-replication -g ${{ parameters.TF_FAILOVER_DB_RG}} -n ${{ parameters.TF_FAILOVER_DB_NAME}} -y
        echo "triggered failover. exit status: $replica_out"
        
        if [ $? -eq 0 ]
        then
          echo "ERROR postgres failover failed"
          exit 1
        fi
        
        echo "updating dns record: az network private-dns record-set cname set-record -g ${{ parameters.TF_DNS_ZONE_RG_NAME }} -z ${{ parameters.TF_DNS_ZONE_NAME }} -n ${{ parameters.TF_DNS_ZONE_RECORD_NAME }} -c $FAILOVER_DB_FQDN"
        az network private-dns record-set cname set-record -g ${{ parameters.TF_DNS_ZONE_RG_NAME }} -z ${{ parameters.TF_DNS_ZONE_NAME }} -n ${{ parameters.TF_DNS_ZONE_RECORD_NAME }} -c $FAILOVER_DB_FQDN
        echo "updated dns record"
        
        echo "âœ… postgres failover completed"


  - task: AzureCLI@2
    displayName: Clean project
    condition: always()
    inputs:
      azureSubscription: '${{ parameters.TF_AZURE_APPLY_SERVICE_CONNECTION_NAME }}'
      addSpnToEnvironment: true
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      failOnStandardError: true
      workingDirectory: '${{ parameters.WORKINGDIR }}'
      inlineScript: |
        echo "[INFO] Clean project"
        rm -rf .azure
