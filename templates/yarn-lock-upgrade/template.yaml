# Azure DevOps pipeline template to upgrade yarn.lock file

parameters:

  - name: 'projectDir'
    type: string
    default: '.'

# ------------------
# Test parameters only


# ------------------
# Steps 

steps:

  #Needed for git to work
  - checkout: self
    clean: true
    persistCredentials: true
    displayName: 'Checkout'

  # setup git author
  - script: |
      git config --global user.email "$(GITHUB_EMAIL)" && git config --global user.name "$(GITHUB_USERNAME)"

      #setup hub CLI
      echo "github.com: 
      - user: $GITHUB_USERNAME
        oauth_token: $(GITHUB_TOKEN)" > ~/.config/hub

    displayName: 'Git setup' 

  - script: |
      set -euo pipefail

      PR_NUMBER=`hub pr list | grep "\[Yarn.lock Upgrade]" | awk '{print $1}' | sed 's/#//'`
      echo "PR number: $PR_NUMBER"

      #if there is an PR aloready open, switch to it
      if [[ -n "$PR_NUMBER" ]] 
      then
        #It should be 'master', but right now it has no files in it
        #CURRENT_BRANCH=master
        CURRENT_BRANCH=`git branch | grep '*' | awk '{print $2}'`
        CREATE_NEW_PR=false

        echo "A PR already exists. Using #$PR_NUMBER."
        echo "Chechout $CURRENT_BRANCH"
        git checkout "$CURRENT_BRANCH"
        
      else
        CREATE_NEW_PR=true
        echo "No PR in place, a new one will be created."
      fi

      yarn install

      lockfile_changed=`git ls-files -m | grep yarn.lock`
      echo "lockfile_changed => $lockfile_changed"
     
      if [ -n "$lockfile_changed" ]
      then

          echo "Yarn.lock has changed, create a PR"

          title="[Yarn.lock Upgrade] Upgrade yarn.lock file"
          description="Autogenerated PR for upgrading yarn.lock file"
          
          
          if [[ $CREATE_NEW_PR == true ]] 
          then
            branch_name="lockfile-upgrade-$(date +%s)"
            git checkout -b "$branch_name"
          else
            branch_name="$CURRENT_BRANCH"
          fi

          git add yarn.lock
          git commit -m "$title"        
          git push origin "$branch_name"

          if [[ $CREATE_NEW_PR == true ]] 
          then
            echo "Create PR $description"
            hub pull-request -m "$title" -m "$description" 
          fi
          
      fi
      
    workingDirectory: ${{ parameters.projectDir }}


  - script: |
      echo "" > ~/.config/hub
    displayName: Cleanup
