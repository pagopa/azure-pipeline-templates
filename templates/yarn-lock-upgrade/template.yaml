# Azure DevOps pipeline template to upgrade yarn.lock file

parameters:

  - name: 'projectDir'
    type: string
    default: '.'

  - name: 'baseBranch'
    type: string
    default: 'master'

# ------------------
# Test parameters only

  - name: 'isTest'
    type: boolean
    default: false

# ------------------
# Steps

steps:

  #Needed for git to work
  - checkout: self
    clean: true
    persistCredentials: true
    displayName: 'Checkout'



  # setup git author
  - script: |
      git config --global user.email "$(GITHUB_EMAIL)" && git config --global user.name "$(GITHUB_USERNAME)"

      #setup hub CLI
      echo "github.com:
      - user: $GITHUB_USERNAME
        oauth_token: $(GITHUB_TOKEN)" > ~/.config/hub

    displayName: 'Git setup'

  - bash: |
      # Set SDK package name, if needed
      [ "${{parameters.isTest}}" == "True" ] && HUB_PR_CMD='-d' || HUB_PR_CMD=''
      echo "setting hub_pr_cmd=$HUB_PR_CMD"
      echo "##vso[task.setvariable variable=hub_pr_cmd;]$HUB_PR_CMD"
    name: setvarStep
    displayName: 'Setup conditional variables'

  - bash: |
      set -euo pipefail

      branch_prefix="lockfile-auto-upgrade"

      PULL_REQUEST_NUMBER=$(hub pr list |  awk '{print $1}' | sed 's/#//' | xargs -I{} sh -c 'echo {} $(hub pr show {} -f %H)' | grep "$branch_prefix" | awk '{print $1}') || echo ""
      echo "==> Open Pull Request $PULL_REQUEST_NUMBER"

      #if there is a PR already open, close it
      if [[ -n "$PULL_REQUEST_NUMBER" ]]
      then
        CURRENT_BRANCH=$(hub pr show "$PULL_REQUEST_NUMBER" -f %H)
        CREATE_NEW_PR=false
        branch_name="$CURRENT_BRANCH"

        echo "A PR #$PULL_REQUEST_NUMBER already exists. Checkout its branch $CURRENT_BRANCH"

        git checkout $CURRENT_BRANCH
        git merge -X theirs origin/${{ parameters.baseBranch }}

      else
        CREATE_NEW_PR=true
        branch_name="$branch_prefix-$(date +%s)"

        echo "No Pull Request exists. Checkout a new branch $branch_name"

        git checkout "${{ parameters.baseBranch }}"
        git checkout -b "$branch_name"

      fi

      yarn install
      lockfile_changed=$(git ls-files -m | grep yarn.lock || echo "")
      echo "lockfile_changed => $lockfile_changed"

      if [ -n "$lockfile_changed" ]
      then
          echo "Yarn.lock has changed, create a PR"
          title="[Yarn.lock Upgrade] Upgrade yarn.lock file"
          description="Autogenerated PR for upgrading yarn.lock file"

          git add yarn.lock
          git commit -m "$title"
          git push origin "$branch_name" --force

          if [[ $CREATE_NEW_PR == true ]]
          then
            echo "Create PR $description"
            hub pull-request -m "$title" -m "$description" $(hub_pr_cmd)
          fi
      fi

    displayName: "Check yarn.lock file and make PR if needed"
    workingDirectory: ${{ parameters.projectDir }}


  - script: |
      echo "" > ~/.config/hub
    displayName: Cleanup
