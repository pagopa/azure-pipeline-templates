# Azure DevOps pipeline template to upgrade yarn.lock file

parameters:

  - name: 'projectDir'
    type: string
    default: '.'

# ------------------
# Test parameters only

  - name: 'isTest'
    type: boolean
    default: false

# ------------------
# Steps 

steps:

  #Needed for git to work
  - checkout: self
    clean: true
    persistCredentials: true
    displayName: 'Checkout'


  # setup git author
  - script: |
      git config --global user.email "$(GITHUB_EMAIL)" && git config --global user.name "$(GITHUB_USERNAME)"

      #setup hub CLI
      echo "github.com: 
      - user: $GITHUB_USERNAME
        oauth_token: $(GITHUB_TOKEN)" > ~/.config/hub

    displayName: 'Git setup' 

  - bash: |
      # Set SDK package name, if needed
      [ "${{parameters.isTest}}" == "True" ] && HUB_PR_CMD='-d' || HUB_PR_CMD=''     
      echo "setting hub_pr_cmd=$HUB_PR_CMD" 
      echo "##vso[task.setvariable variable=hub_pr_cmd;]$HUB_PR_CMD"
    name: setvarStep
    displayName: 'Setup conditional variables'

  - bash: |
      PULL_REQUEST_NUMBER=$(hub pr list | grep "\[Yarn.lock Upgrade]" | awk '{print $1}' | sed 's/#//')
      echo "==> PR $PULL_REQUEST_NUMBER"

      #if there is a PR already open, close it
      if [[ -n "$PULL_REQUEST_NUMBER" ]] 
      then
        echo "A PR #$PULL_REQUEST_NUMBER already exists. Closing it."
        hub issue update $PULL_REQUEST_NUMBER -s closed   
      fi

      #It should be 'master', but right now it has no files in it
      #git checkout master
      
      yarn install
      lockfile_changed=`git ls-files -m | grep yarn.lock`
      echo "lockfile_changed => $lockfile_changed"

      if [ -n "$lockfile_changed" ]
      then
          echo "Yarn.lock has changed, create a PR"
          title="[Yarn.lock Upgrade] Upgrade yarn.lock file"
          description="Autogenerated PR for upgrading yarn.lock file"

          branch_name="lockfile-auto-upgrade-$(date +%s)"
          git checkout -b "$branch_name"

          git add yarn.lock
          git commit -m "$title"        
          git push origin "$branch_name"
          
          echo "Create PR $description"
          hub pull-request -m "$title" -m "$description" $(hub_pr_cmd) 
      fi

    displayName: "Check yarn.lock file and make PR if needed"
    workingDirectory: ${{ parameters.projectDir }}


  - script: |
      echo "" > ~/.config/hub
    displayName: Cleanup
