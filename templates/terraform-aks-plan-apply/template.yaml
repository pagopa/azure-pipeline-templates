# Run terraform init and terraform plan
parameters:
  - name: 'DOMAIN_NAME'
    displayName: '(Required) Domain name. e.g: domain-app'
    type: string
  - name: 'AZURE_DEVOPS_POOL_AGENT_NAME'
    displayName: '(Required) Azure devops agent name.'
    type: string
  - name: 'AZURE_SERVICE_CONNECTION_NAME'
    displayName: '(Required) Azure service connection name.'
    type: string
  - name: 'AZURE_DEVOPS_ENVIRONMENT'
    displayName: '(Required) Azure devops ENV name. For example [dev|uat|prod] etc.'
    type: string
  - name: 'TF_ENVIRONMENT_FOLDER'
    displayName: '(Required) Terraform environment folder name to apply to. For example [dev|weudev|uat|weuuat|prod|weuprod] etc.'
    type: string
  - name: 'WORKINGDIR'
    displayName: '(Optional) Working direcory containing terraform templates and the terraform.sh helper.'
    type: string
    default: "src"
  - name: 'AKS_NAME'
    displayName: '(Optional) AKS Name'
    type: string
    default: ""
  - name: 'AKS_RESOURCE_GROUP'
    displayName: '(Required) AKS resource group.'
    type: string


stages:
  - stage: ${{parameters.AZURE_DEVOPS_ENVIRONMENT}}_plan_${{parameters.DOMAIN_NAME}}
    displayName: ðŸ”¦ ${{parameters.AZURE_DEVOPS_ENVIRONMENT}}_plan_${{parameters.DOMAIN_NAME}}
    dependsOn: []
    condition: succeeded()
    pool:
      name: ${{parameters.AZURE_DEVOPS_POOL_AGENT_NAME}}
    jobs:
      - job: ${{parameters.AZURE_DEVOPS_ENVIRONMENT}}_plan_${{parameters.DOMAIN_NAME}}
        timeoutInMinutes: $[variables.TIME_OUT]
        steps:
          - checkout: self
          # 1. Install terraform
          - template: ../terraform-setup/template.yaml@terraform
          # 2. Run terraform plan
          - template: ../terraform-aks-action/template.yaml@terraform
            parameters:
              TF_ACTION: "plan"
              TF_ENVIRONMENT_FOLDER: ${{parameters.TF_ENVIRONMENT_FOLDER}}
              WORKINGDIR: ${{parameters.WORKINGDIR}}
              AZURE_SERVICE_CONNECTION_NAME: ${{parameters.AZURE_SERVICE_CONNECTION_NAME}}
              AKS_NAME: ${{parameters.AKS_NAME}}
              AKS_RESOURCE_GROUP: ${{ variables.AKS_DEV_RESOURCE_GROUP }}

  - stage: ${{parameters.AZURE_DEVOPS_ENVIRONMENT}}_apply_${{parameters.DOMAIN_NAME}}
    displayName: ðŸš€ ${{parameters.AZURE_DEVOPS_ENVIRONMENT}}_apply_${{parameters.DOMAIN_NAME}}
    dependsOn: ['${{parameters.AZURE_DEVOPS_ENVIRONMENT}}_plan_${{parameters.DOMAIN_NAME}}']
    condition: succeeded()
    pool:
      name: ${{parameters.AZURE_DEVOPS_POOL_AGENT_NAME}}
    jobs:
      - deployment: ${{parameters.AZURE_DEVOPS_ENVIRONMENT}}_apply_${{parameters.DOMAIN_NAME}}
        continueOnError: false
        environment: ${{parameters.AZURE_DEVOPS_ENVIRONMENT}}
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                # 1. Install terraform
                - template: ../terraform-setup/template.yaml@terraform
                # 2. Run terraform apply
                - template: ../terraform-aks-action/template.yaml@terraform
                  parameters:
                    TF_ACTION: "apply"
                    TF_ENVIRONMENT_FOLDER: ${{parameters.TF_ENVIRONMENT_FOLDER}}
                    WORKINGDIR: ${{parameters.WORKINGDIR}}
                    AZURE_SERVICE_CONNECTION_NAME: ${{parameters.AZURE_SERVICE_CONNECTION_NAME}}
                    AKS_NAME: ${{parameters.AKS_NAME}}
                    AKS_RESOURCE_GROUP: ${{ variables.AKS_DEV_RESOURCE_GROUP }}
