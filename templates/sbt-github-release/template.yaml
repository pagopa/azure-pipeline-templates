# Node GitHub Relase steps
# Mark a release on the project repository, with version bump and tag,
# and publish a release on GitHub

parameters:
  - name: env
    displayName: Target Environment
    type: string
    default: dev
    values:
      - dev
      - uat
      - prd

  # Versioning parameters
  - name: 'semver'
    type: string
    values:
      - major
      - minor
      - patch
      - buildNumber
      - skip

  # This is the branch in which we will push the release tag.
  # It'll be master, but it can be overridden
  # Basically, this variable is used to enforce the fact that we use the very same branch in different steps
  - name: 'release_branch'
    type: string
    default: ' '

  # GitHub parameters
  - name: 'gitUsername'
    type: string
  - name: 'gitEmail'
    type: string
  - name: 'gitHubConnection'
    type: string

steps:
  # setup git author
  - script: |
      git config --global user.name "${{ parameters.gitUsername }}"
      git config --global user.email "${{ parameters.gitEmail }}"
    displayName: 'Git setup'

  # Without this step, changes would be applied to a detached head
  - script: |
      git checkout ${{ parameters.release_branch }}
    displayName: 'Checkout release branch'

  - script: |
      if [ ! -f "version.sbt" ]
      then
        echo "File 'version.sbt' does not exists"
        exit 1
      fi

      IFS='"'
      arrVers=($(cat version.sbt))
      SBT_VERSION="${arrVers[1]}"
      IFS=' '

      echo "##vso[task.setvariable variable=SBT_VERSION;isOutput=false]$SBT_VERSION"
    displayName: "Set var SBT_VERSION"

  - script: |
      echo "SBT_VERSION: $(SBT_VERSION)"

      IFS="-" read VERSION PRE_RELEASE <<< $(SBT_VERSION); IFS="\n"
      IFS="." read MAJOR MINOR PATCH <<< $VERSION; IFS="\n"
      IFS="." read PRE_RELEASE_NAME PRE_RELEASE_VERSION <<< $PRE_RELEASE; IFS="\n"

      echo "VERSION: $VERSION"
      echo "PRE_RELEASE: $PRE_RELEASE"
      echo "MAJOR: $MAJOR"
      echo "MINOR: $MINOR"
      echo "PATCH: $PATCH"
      echo "PRE_RELEASE_NAME: $PRE_RELEASE_NAME"
      echo "PRE_RELEASE_VERSION: $PRE_RELEASE_VERSION"

      IS_HOTFIX_VERSION=false
      if [[ "$PATCH" != "0" ]]; then
        IS_HOTFIX_VERSION=true
      fi

      echo "##vso[task.setvariable variable=SBT_VERSION;isOutput=true]$SBT_VERSION"
      echo "##vso[task.setvariable variable=VERSION;isOutput=true]$VERSION"
      echo "##vso[task.setvariable variable=PRE_RELEASE;isOutput=true]$PRE_RELEASE"
      echo "##vso[task.setvariable variable=MAJOR;isOutput=true]$MAJOR"
      echo "##vso[task.setvariable variable=MINOR;isOutput=true]$MINOR"
      echo "##vso[task.setvariable variable=PATCH;isOutput=true]$PATCH"
      echo "##vso[task.setvariable variable=PRE_RELEASE_NAME;isOutput=true]$PRE_RELEASE_NAME"
      echo "##vso[task.setvariable variable=PRE_RELEASE_VERSION;isOutput=true]$PRE_RELEASE_VERSION"
      echo "##vso[task.setvariable variable=IS_HOTFIX_VERSION;isOutput=true]$IS_HOTFIX_VERSION"
    name: getSbtVar
    displayName: "Split SBT_VERSION and set vars"

  - script: |
      if [ "${{ parameters.semver }}" == "skip" ]; then
        echo "version on project: $SBT_VERSION"
        OVERRIDE_SBT_VERSION=$SBT_VERSION
      elif [ "${{ parameters.semver }}" == "buildNumber" ]; then
        PRE_RELEASE_VERSION=$(getSbtVar.PRE_RELEASE_VERSION)
        PRE_RELEASE_VERSION_WITHOUT_BETA=${PRE_RELEASE_VERSION/-beta/""}
        
        RELEASE_VERSION=$(getSbtVar.MAJOR).$(getSbtVar.MINOR).$(getSbtVar.PATCH)-rc.$PRE_RELEASE_VERSION_WITHOUT_BETA
        RELEASE_BETA_VERSION=$(getSbtVar.MAJOR).$(getSbtVar.MINOR).$(getSbtVar.PATCH)-rc.$(($(getSbtVar.PRE_RELEASE_VERSION)+1))-beta
      
        #        echo "##vso[task.setvariable variable=RELEASE_VERSION]$RELEASE_VERSION"
        #        echo "##vso[task.setvariable variable=RELEASE_BETA_VERSION]$RELEASE_BETA_VERSION"
        OVERRIDE_SBT_VERSION=$RELEASE_VERSION
        echo "new version is: $OVERRIDE_SBT_VERSION"
      else
        arrVerSplit=(${SBT_VERSION//./ })
        MAJOR=${arrVerSplit[0]}
        MINOR=${arrVerSplit[1]}
        arrPatchValueSplit=(${arrVerSplit[2]//-/ })
        PATCH=${arrPatchValueSplit[0]}

        # break down the version number into it's components
        regex="([0-9]+).([0-9]+).([0-9]+)"
        if [[ $version =~ $regex ]]; then
          MAJOR="${BASH_REMATCH[0]}"
          MINOR="${BASH_REMATCH[1]}"
          PATCH="${BASH_REMATCH[2]}"
        fi

        # check paramater to see which number to increment
        if [[ "${{ parameters.semver }}" == "patch" ]]; then
          PATCH=$(echo $PATCH + 1 | bc)
        elif [[ "${{ parameters.semver }}" == "minor" ]]; then
          MINOR=$(echo $MINOR + 1 | bc)
          PATCH=0
        else
          MAJOR=$(echo $MAJOR+1 | bc)
          MINOR=0
          PATCH=0
        fi
      
        OVERRIDE_SBT_VERSION="${MAJOR}.${MINOR}.${PATCH}"
        BRANCH_RELEASE=release/${MAJOR}.${MINOR}

        echo "new version is ${OVERRIDE_SBT_VERSION}"
        echo "##vso[task.setvariable variable=BRANCH_RELEASE]$BRANCH_RELEASE"
      fi
      echo "##vso[task.setvariable variable=OVERRIDE_SBT_VERSION]$OVERRIDE_SBT_VERSION"
    name: getOverrideSbtVar
    displayName: "Override sbtVersion"

  - task: Bash@3
    displayName: Update version Helm
    name: update_version_helm
    inputs:
      targetType: 'inline'
      script: |
        for i in helm/nodo/values-${{ parameters['env'] }}.yaml; do
          [ -f "$i" ] || break
          yq -i ".nodo.image.tag = \"$(OVERRIDE_SBT_VERSION)\"" "$i"
          git add "$i"
        done
        CHART_FILE="helm/nodo/Chart.yaml"
        if [[ -f "$CHART_FILE" ]]; then
          yq -i ".version = \"$(OVERRIDE_SBT_VERSION)\"" "$CHART_FILE"
          yq -i ".appVersion = \"$(OVERRIDE_SBT_VERSION)\"" "$CHART_FILE"
          git add "$CHART_FILE"
        fi
        
        cat helm/nodo/values-${{ parameters['env'] }}.yaml

    # push new version
#  - script: |
#      git ls-files . | grep 'pom.xml'  | xargs git add
#      git commit -m "Bump version [skip ci]"
#      git push origin ${{ parameters.release_branch }}
#    displayName: 'Push to the release branch'

  - script: |
      HEAD_SHA=$(git rev-parse HEAD)
      TAG="$(next_version.value)"
      TITLE="Release $(next_version.value)"
      echo "##vso[task.setvariable variable=title]$TITLE"
      echo "##vso[task.setvariable variable=sha]$HEAD_SHA"
      echo "##vso[task.setvariable variable=tag]$TAG"
    displayName: 'Set release variables'

  # create new release
#  - ${{ if and(ne(parameters.semver, 'skip'), ne(parameters.semver, 'buildNumber'))}}:
#      - task: GitHubRelease@0
#        inputs:
#          gitHubConnection: ${{ parameters.gitHubConnection }}
#          repositoryName: $(Build.Repository.Name)
#          action: create
#          target: $(sha)
#          tagSource: manual
#          tag: $(tag)
#          title: $(title)
#          addChangelog: true
