# Azure DevOps template used to perform an healthcheck on an http endpoint
#
# An HTTP request to a given endpoint. Such endpoint is provided by the application with the purpose of checking the app has been configurated correctly.

parameters:
  - name: 'azureSubscription'
    type: string

  - name: 'appName'
    type: string

  - name: 'responseCheckString'
    type: string
    default: 'version'

  # full endpoint healthcheck against
  - name: 'endpoint'
    type: string

  # custom headers
  - name: 'headers'
    type: string
    default: 'no-headers'

  # select if endpoint is public or private
  - name: 'endpointType'
    type: string
    values:
      - public
      - private

  # min container instance cpu
  - name: 'containerInstanceCpu'
    type: string
    default: '0.5'

  # min container instance memory
  - name: 'containerInstanceMemory'
    type: string
    default: '0.5'

  # the resource group must be the same where vnet is created
  - name: 'containerInstanceResourceGroup'
    type: string

  # attached vnet to the container instance
  - name: 'containerInstanceVNet'
    type: string

  # container instance subnet
  - name: 'containerInstanceSubnet'
    type: string

steps:
  - task: AzureCLI@2
    displayName: Healthcheck
    inputs:
      azureSubscription: '${{ parameters.azureSubscription }}'
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      failOnStandardError: false
      inlineScript: |
        if [ '${{ parameters.headers }}' = "no-headers" ]; then
          HEADERS=""
        else
          HEADERS="--headers ${{ parameters.headers }}"
        fi

        echo "endpointType: ${{ parameters.endpointType }}"
        if [ '${{ parameters.endpointType }}' = "public" ]; then
          OUTPUT_REST=$(az rest --skip-authorization-header --method get --url '${{ parameters.endpoint }}' ${HEADERS})
          echo ${OUTPUT_REST}
          # check if rest response contains app-name
          if [[ ${OUTPUT_REST} == *${{ parameters.responseCheckString }}* ]]; then
            echo "responseCheckString: '${{ parameters.responseCheckString }}' found, continue"
            exit 0
          else
            echo "responseCheckString: '${{ parameters.responseCheckString }}' not found, fail"
            exit 1
          fi
        fi

        if [ '${{ parameters.endpointType }}' = "private" ]; then
          # define a temporary container instance name
          CONTAINER_INSTANCE_NAME="${{ parameters.appName }}-deploy"
          
          # check if vnet exists in target resource group (containerInstanceResourceGroup)
          OUTPUT_VNET=$(az network vnet list --resource-group '${{ parameters.containerInstanceResourceGroup }}' --query "[?contains(name, '${{ parameters.containerInstanceVNet }}')].name" --output tsv)
          if [ "$OUTPUT_VNET" = '${{ parameters.containerInstanceVNet }}' ]; then
            echo "containerInstanceVNet: '${{ parameters.containerInstanceVNet }}' found, continue"
          else
            echo "containerInstanceVNet: '${{ parameters.containerInstanceVNet }}' not found, fail"
            exit 1
          fi

          # check if subnet exists in target resource group and vnet (containerInstanceResourceGroup, containerInstanceVNet)
          OUTPUT_SUBNET=$(az network vnet subnet list --resource-group '${{ parameters.containerInstanceResourceGroup }}' --vnet-name '${{ parameters.containerInstanceVNet }}' --query "[?contains(name, '${{ parameters.containerInstanceSubnet }}')].name" --output tsv)
          if [ "$OUTPUT_SUBNET" = '${{ parameters.containerInstanceSubnet }}' ]; then
            echo "containerInstanceSubnet: '${{ parameters.containerInstanceSubnet }}' found, continue"
          else
            echo "containerInstanceSubnet: '${{ parameters.containerInstanceSubnet }}' not found, fail"
            exit 1
          fi

          # create, run container instance in subnet, and get exit code
          OUTPUT_CREATE=$(az container create \
                          --resource-group '${{ parameters.containerInstanceResourceGroup }}' \
                          --name ${CONTAINER_INSTANCE_NAME} \
                          --image microsoft/azure-cli:latest \
                          --cpu '${{ parameters.containerInstanceCpu }}' \
                          --memory '${{ parameters.containerInstanceMemory }}' \
                          --restart-policy Never \
                          --vnet '${{ parameters.containerInstanceVNet }}' \
                          --subnet '${{ parameters.containerInstanceSubnet }}' \
                          --command-line "az rest --skip-authorization-header --method get --url '${{ parameters.endpoint }}' ${HEADERS}" \
                          --output tsv \
                          --query containers[].instanceView.currentState.exitCode)
          
          # print container instance logs
          OUTPUT_REST=$(az container logs --resource-group '${{ parameters.containerInstanceResourceGroup }}' --name ${CONTAINER_INSTANCE_NAME})
          # delete container instance
          OUTPUT_DELETE=$(az container delete --resource-group ${{ parameters.containerInstanceResourceGroup }} --name ${CONTAINER_INSTANCE_NAME} --yes)
          echo ${OUTPUT_REST}
          # check if rest response contains app-name
          if [[ ${OUTPUT_REST} == *${{ parameters.responseCheckString }}* ]]; then
            echo "responseCheckString: '${{ parameters.responseCheckString }}' found, continue"
            exit 0
          else
            echo "responseCheckString: '${{ parameters.responseCheckString }}' not found, fail"
            exit 1
          fi
        fi
