# Allow to generate kubeconfig for azure
parameters:
  - name: 'AZURE_SERVICE_CONNECTION_NAME'
    displayName: '(Required) Azure service connection name.'
    type: string
  - name: 'WORKINGDIR'
    displayName: '(Optional) Working directory containing terraform templates and the terraform.sh helper.'
    type: string
    default: "src"
  - name: 'AKS_NAME'
    displayName: '(Optional) AKS Name'
    type: string
    default: ""
  - name: 'AKS_API_SERVER_URL'
    displayName: '(Optional) AKS api server url like (e.g. https://my-url.com:443)'
    type: string
    default: ""
  - name: 'AKS_AZURE_DEVOPS_SA_CA_CRT'
    displayName: '(Optional) AKS service account CA cert, used by azure devops account'
    type: string
    default: ""
  - name: 'AKS_AZURE_DEVOPS_SA_TOKEN'
    displayName: '(Optional) AKS service account token, used by azure devops account'
    type: string
    default: ""

steps:
  - task: Bash@3
    displayName: Check Parameters for kubeconfig
    condition: and(succeeded(), ne('${{ parameters.AKS_AZURE_DEVOPS_SA_CA_CRT }}', ''))
    inputs:
      targetType: inline
      failOnStderr: true
      script: |
        set -e
        e=0

        if [[ "${{ parameters.AKS_NAME }}" != "" ]] || \
           [[ "${{ parameters.AKS_API_SERVER_URL }}" != "" ]] || \
           [[ "${{ parameters.AKS_AZURE_DEVOPS_SA_TOKEN }}" != "" ]] || \
           [[ "${{ parameters.AKS_AZURE_DEVOPS_SA_CA_CRT }}" != "" ]]; then

          if [[ "${{ parameters.AKS_NAME }}" == "" ]]; then
            echo "##[error] AKS_NAME is empty"
            ((e=e+1))
          fi

          if [[ "${{ parameters.AKS_API_SERVER_URL }}" == "" ]]; then
            echo "##[error] AKS_API_SERVER_URL is empty"
            ((e=e+1))
          fi

          if [[ "${{ parameters.AKS_AZURE_DEVOPS_SA_TOKEN }}" == "" ]]; then
            echo "##[error] AKS_AZURE_DEVOPS_SA_TOKEN is empty"
            ((e=e+1))
          fi

          if [[ "${{ parameters.AKS_AZURE_DEVOPS_SA_CA_CRT }}" == "" ]]; then
            echo "##[error] AKS_AZURE_DEVOPS_SA_CA_CRT is empty"
            ((e=e+1))
          fi

          if [[ $e > 0 ]]; then
            exit 1
          fi
        fi

  - task: AzureCLI@2
    displayName: Genereate Kubeconfig (if necessary)
    condition: and(succeeded(), ne('${{ parameters.AKS_AZURE_DEVOPS_SA_CA_CRT }}', ''))
    inputs:
      azureSubscription: '${{ parameters.AZURE_SERVICE_CONNECTION_NAME }}'
      addSpnToEnvironment: true
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      failOnStandardError: true
      workingDirectory: '${{ parameters.WORKINGDIR }}'
      inlineScript: |
        echo "##[section] üíà Start generation of kubeconfig"

        echo "##[group]Kubernetes kubeconfig setup"
        echo "${{ parameters.AKS_AZURE_DEVOPS_SA_CA_CRT }}"| base64 --decode > cacrt
        echo "‚úÖ Created cacrt file"

        kubectl config set-cluster aks-azure-devops \
          --certificate-authority=cacrt \
          --embed-certs=true \
          --server=${{ parameters.AKS_API_SERVER_URL }} \
          --kubeconfig="config-${{ parameters.AKS_NAME }}"
        echo "[INFO] kubectl set-cluster"

        kubectl config set-credentials azure-devops \
          --token=${{ parameters.AKS_AZURE_DEVOPS_SA_TOKEN }} \
          --kubeconfig="config-${{ parameters.AKS_NAME }}"
        echo "[INFO] kubectl set-credentials"

        kubectl config set-context iac \
          --cluster=aks-azure-devops \
          --user=azure-devops \
          --kubeconfig="config-${{ parameters.AKS_NAME }}"
        echo "[INFO] kubectl set-context"
        echo "‚öôÔ∏è kubectl composed"

        kubelogin convert-kubeconfig -l azurecli --kubeconfig "config-${{ parameters.AKS_NAME }}"
        echo "Ô∏è‚öôÔ∏è kubelogin applied"

        kubectl config use-context iac --kubeconfig="config-${{ parameters.AKS_NAME }}"
        echo "‚öôÔ∏è kubectl change context"

        echo "‚úÖ kubeconfig ready"

        echo "##[endgroup]"
