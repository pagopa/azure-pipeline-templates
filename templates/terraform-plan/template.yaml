# Run terraform init and terraform plan
parameters:
  - name: 'AZURE_SERVICE_CONNECTION_NAME'
    displayName: 'Azure service connection name.'
    type: string
    default: "none"
  - name: 'ENVIRONMENT'
    displayName: 'Environment to apply to. Possible values are [dev|uat|prod] etc.'
    type: string
    default: "dev"
  - name: 'WORKINGDIR'
    displayName: 'Working direcory containing terraform templates and the terraform.sh helper.'
    type: string
    default: "src"
  - name: 'AKS_NAME'
    displayName: ''
    type: string
    default: ""
  - name: 'AKS_RG_NAME'
    displayName: ''
    type: string
    default: ""


steps:

- task: AzureCLI@2
  displayName: Terraform plan
  inputs:
    azureSubscription: '${{ parameters.AZURE_SERVICE_CONNECTION_NAME }}'
    addSpnToEnvironment: true
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    failOnStandardError: true
    workingDirectory: '${{ parameters.WORKINGDIR }}'
    inlineScript: |
      echo "##[section]Start terraform plan for env=${{ parameters.ENVIRONMENT }}"

      export ARM_CLIENT_ID="${servicePrincipalId}"
      export ARM_CLIENT_SECRET="${servicePrincipalKey}"
      export ARM_SUBSCRIPTION_ID=$(az account show --query id --output tsv)
      export ARM_TENANT_ID=$(az account show --query tenantId --output tsv)

      if [[ "${{ parameters.AKS_NAME }}" != "" ]]; then
        echo "${{ parameters.AKS_NAME }}"
        echo "${{ parameters.AKS_RG_NAME }}"
        az aks get-credentials --resource-group "${{ parameters.AKS_RG_NAME }}" --name "${{ parameters.AKS_NAME }}" --file "~/.kube/config-${{ parameters.AKS_NAME }}" --verbose

        ls -la
        kubectl get nodes --kubeconfig="~/.kube/config-${{ parameters.AKS_NAME }}"
      fi


      #./terraform.sh plan ${{ parameters.ENVIRONMENT }}
