# Run terraform init and terraform plan
parameters:
  - name: 'AZURE_SERVICE_CONNECTION_NAME'
    displayName: '(Required) Azure service connection name.'
    type: string
  - name: 'TF_ENVIRONMENT_FOLDER'
    displayName: '(Required) Terraform environment folder name to apply to. For example [dev|weudev|uat|weuuat|prod|weuprod] etc.'
    type: string
  - name: 'WORKINGDIR'
    displayName: '(Optional) Working direcory containing terraform templates and the terraform.sh helper.'
    type: string
    default: "src"
  - name: 'AKS_NAME'
    displayName: '(Optional) AKS Name'
    type: string
    default: ""
  - name: 'KUBERNETES_VERSION'
    displayName: '(Optional) Kubernetes version, default 1.23'
    type: string
    default: "1.23"
  # - name: 'AKS_API_SERVER_URL'
  #   displayName: '(Optional) AKS api server url like (e.g. https://my-url.com:443)'
  #   type: string
  #   default: ""
  # - name: 'AKS_AZURE_DEVOPS_SA_CA_CRT'
  #   displayName: '(Optional) AKS service account CA cert, used by azure devops account'
  #   type: string
  #   default: ""
  # - name: 'AKS_AZURE_DEVOPS_SA_TOKEN'
  #   displayName: '(Optional) AKS service account token, used by azure devops account'
  #   type: string
  #   default: ""

steps:
  # - task: Bash@3
  #   displayName: Plan(Check Parameters)
  #   inputs:
  #     targetType: inline
  #     failOnStderr: true
  #     script: |
  #       set -e
  #       e=0

  #       if [[ "${{ parameters.AKS_NAME }}" != "" ]] || \
  #          [[ "${{ parameters.AKS_API_SERVER_URL }}" != "" ]] || \
  #          [[ "${{ parameters.AKS_AZURE_DEVOPS_SA_TOKEN }}" != "" ]] || \
  #          [[ "${{ parameters.AKS_AZURE_DEVOPS_SA_CA_CRT }}" != "" ]]; then

  #         if [[ "${{ parameters.AKS_NAME }}" == "" ]]; then
  #           echo "##[error] AKS_NAME is empty"
  #           ((e=e+1))
  #         fi

  #         if [[ "${{ parameters.AKS_API_SERVER_URL }}" == "" ]]; then
  #           echo "##[error] AKS_API_SERVER_URL is empty"
  #           ((e=e+1))
  #         fi

  #         if [[ "${{ parameters.AKS_AZURE_DEVOPS_SA_TOKEN }}" == "" ]]; then
  #           echo "##[error] AKS_AZURE_DEVOPS_SA_TOKEN is empty"
  #           ((e=e+1))
  #         fi

  #         if [[ "${{ parameters.AKS_AZURE_DEVOPS_SA_CA_CRT }}" == "" ]]; then
  #           echo "##[error] AKS_AZURE_DEVOPS_SA_CA_CRT is empty"
  #           ((e=e+1))
  #         fi

  #         if [[ $e > 0 ]]; then
  #           exit 1
  #         fi
  #       fi

  - task: AzureCLI@2
    displayName: Plan Terraform
    inputs:
      connectedServiceNameARM: '${{ parameters.AZURE_SERVICE_CONNECTION_NAME }}'
      addSpnToEnvironment: true
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      failOnStandardError: true
      workingDirectory: '${{ parameters.WORKINGDIR }}'
      inlineScript: |
        echo "##[section] ðŸŽ“ Configure kubeconfig"

        # download kubectl and kubelogin
        sudo az aks install-cli --client-version ${{ parameters.KUBERNETES_VERSION }} --kubelogin-version latest --only-show-errors

        az aks get-credentials -g ${{ parameters.AKS_NAME }} -n dvopla-d-neu-dev01-aks -f config-${{ parameters.AKS_NAME }} --only-show-errors

        export KUBECONFIG=config-${{ parameters.AKS_NAME }}

        kubelogin convert-kubeconfig -l spn --client-id "${servicePrincipalId}" --client-secret "${servicePrincipalKey}"

        kubectl get po --namespace diego


  # - task: AzureCLI@2
  #   displayName: Plan Terraform
  #   inputs:
  #     connectedServiceNameARM: '${{ parameters.AZURE_SERVICE_CONNECTION_NAME }}'
  #     addSpnToEnvironment: true
  #     scriptType: 'bash'
  #     scriptLocation: 'inlineScript'
  #     failOnStandardError: true
  #     workingDirectory: '${{ parameters.WORKINGDIR }}'
  #     inlineScript: |
  #       echo "##[section] ðŸ’ˆ Start terraform plan for tf-env-folder=${{ parameters.TF_ENVIRONMENT_FOLDER }}"

  #       export ARM_CLIENT_ID="${servicePrincipalId}"
  #       export ARM_CLIENT_SECRET="${servicePrincipalKey}"
  #       export ARM_SUBSCRIPTION_ID=$(az account show --query id --output tsv)
  #       export ARM_TENANT_ID=$(az account show --query tenantId --output tsv)

  #       if [[ "${{ parameters.AKS_NAME }}" != "" ]]; then
  #         echo "[INFO] ðŸš€ Run terraform plan + kubernetes"
  #         ./terraform.sh plan ${{ parameters.TF_ENVIRONMENT_FOLDER }} -var k8s_kube_config_path_prefix="$(pwd)"
  #       else
  #         echo "[INFO] ðŸš€ Run terraform plan"
  #         ./terraform.sh plan ${{ parameters.TF_ENVIRONMENT_FOLDER }}
  #       fi

  #       echo "[INFO] Clean project"
  #       rm -rf .kube
  #       rm -rf .azure
  #       rm -rf config-${{ parameters.AKS_NAME }}
