# Run terraform init and terraform plan
parameters:
  - name: 'AZURE_SERVICE_CONNECTION_NAME'
    displayName: '(Required) Azure service connection name.'
    type: string
  - name: 'TF_ENVIRONMENT_FOLDER'
    displayName: '(Required) Terraform environment folder name to apply to. For example [dev|weudev|uat|weuuat|prod|weuprod] etc.'
    type: string
  - name: 'WORKINGDIR'
    displayName: '(Optional) Working direcory containing terraform templates and the terraform.sh helper.'
    type: string
    default: "src"
  - name: 'AKS_NAME'
    displayName: '(Optional) AKS Name'
    type: string
    default: ""
  - name: 'AKS_API_SERVER_URL'
    displayName: '(Optional) AKS api server url like (e.g. https://my-url.com:443)'
    type: string
    default: ""
  - name: 'AKS_AZURE_DEVOPS_SA_CA_CRT'
    displayName: '(Optional) AKS service account CA cert, used by azure devops account'
    type: string
    default: ""
  - name: 'AKS_AZURE_DEVOPS_SA_TOKEN'
    displayName: '(Optional) AKS service account token, used by azure devops account'
    type: string
    default: ""
  - name: TF_SUMMARIZE
    displayName: Show summarize data
    type: boolean
    default: false

steps:

  - template: ../azure-kubeconfig-generator/template.yaml
    parameters:
      AZURE_SERVICE_CONNECTION_NAME: '${{ parameters.AZURE_SERVICE_CONNECTION_NAME }}'
      WORKINGDIR: '${{ parameters.WORKINGDIR }}'
      AKS_NAME: '${{ parameters.AKS_NAME }}'
      AKS_API_SERVER_URL: '${{ parameters.AKS_API_SERVER_URL }}'
      AKS_AZURE_DEVOPS_SA_CA_CRT: '${{ parameters.AKS_AZURE_DEVOPS_SA_CA_CRT }}'
      AKS_AZURE_DEVOPS_SA_TOKEN: '${{ parameters.AKS_AZURE_DEVOPS_SA_TOKEN }}'

  - task: AzureCLI@2
    displayName: Plan Terraform
    inputs:
      azureSubscription: '${{ parameters.AZURE_SERVICE_CONNECTION_NAME }}'
      addSpnToEnvironment: true
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      failOnStandardError: true
      workingDirectory: '${{ parameters.WORKINGDIR }}'
      inlineScript: |
        echo "##[section] ðŸ’ˆ Start terraform plan for tf-env-folder=${{ parameters.TF_ENVIRONMENT_FOLDER }}"

        export ARM_CLIENT_ID="${servicePrincipalId}"
        export ARM_CLIENT_SECRET="${servicePrincipalKey}"
        export ARM_SUBSCRIPTION_ID=$(az account show --query id --output tsv)
        export ARM_TENANT_ID=$(az account show --query tenantId --output tsv)

        generate_state_output=""

        if [[ "${{ parameters.TF_SUMMARIZE }}" == "True" ]]; then
          echo "[info] Added option to generate tfplan"
          generate_state_output="-out=tfplan"
        else
          echo "ðŸ¤” No summary: ${{ parameters.TF_SUMMARIZE }}"
        fi

        if [[ "${{ parameters.AKS_NAME }}" != "" ]]; then
          echo "[INFO] ðŸš€ Run terraform plan + kubernetes"
          ./terraform.sh plan ${{ parameters.TF_ENVIRONMENT_FOLDER }} -var k8s_kube_config_path_prefix="$(pwd)" -lock-timeout=300s -lock=false ${generate_state_output}
        else
          echo "[INFO] ðŸš€ Run terraform plan"
          ./terraform.sh plan ${{ parameters.TF_ENVIRONMENT_FOLDER }} -lock-timeout=300s -lock=false ${generate_state_output}
        fi

  - task: Bash@3
    displayName: Show tree
    condition: and(succeeded(), eq('${{ parameters.TF_SUMMARIZE }}', true))
    inputs:
      workingDirectory: '${{ parameters.WORKINGDIR }}'
      targetType: 'inline'
      failOnStderr: false
      script: |
        if [ ! -e "tfplan" ]; then
            echo "Il file non esiste."
        fi
        ls -la
        tf-summarize -v
        echo "[info] state tree"
        sudo tf-summarize -tree tfplan

  - task: Bash@3
    displayName: Show draw
    condition: and(succeeded(), eq('${{ parameters.TF_SUMMARIZE }}', true))
    inputs:
      workingDirectory: '${{ parameters.WORKINGDIR }}'
      targetType: 'inline'
      failOnStderr: false
      script: |
        if [ ! -e "tfplan" ]; then
          echo "Il file non esiste."
        fi

        echo "[info] state tree"
        tf-summarize -separate-tree -draw tfplan

  - task: Bash@3
    displayName: Install terraform
    condition: succeeded()
    inputs:
      targetType: 'inline'
      failOnStderr: false
      script: |
        echo "[INFO] Clean project"
        rm -rf .kube
        rm -rf .azure
        rm -rf config-${{ parameters.AKS_NAME }}
        rm tfplan || true
