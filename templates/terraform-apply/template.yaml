# Run terraform init and terraform plan
parameters:
  - name: 'AZURE_PLAN_SERVICE_CONNECTION_NAME'
    displayName: '(Required) Azure service connection name.'
    type: string
  - name: 'AZURE_APPLY_SERVICE_CONNECTION_NAME'
    displayName: '(Required) Azure service connection name.'
    type: string
  - name: 'TF_ENVIRONMENT_FOLDER'
    displayName: '(Required) Terraform environment folder name to apply to. For example [dev|weu-dev|uat|weu-uat|prod|weu-prod] etc.'
    type: string
  - name: 'WORKINGDIR'
    displayName: '(Optional) Working direcory containing terraform templates and the terraform.sh helper.'
    type: string
    default: "src"
  - name: 'AKS_NAME'
    displayName: '(Optional) AKS Name'
    type: string
    default: ""
  - name: 'AKS_API_SERVER_URL'
    displayName: '(Optional) AKS api server url like (e.g. https://my-url.com:443)'
    type: string
    default: ""
  - name: 'AKS_AZURE_DEVOPS_SA_CA_CRT'
    displayName: '(Optional) AKS service account CA cert, used by azure devops account'
    type: string
    default: ""
  - name: 'AKS_AZURE_DEVOPS_SA_TOKEN'
    displayName: '(Optional) AKS service account token, used by azure devops account'
    type: string
    default: ""

steps:
  - checkout: self

  - template: ../azure-kubeconfig-generator/template.yaml
    parameters:
      AZURE_SERVICE_CONNECTION_NAME: '${{ parameters.AZURE_PLAN_SERVICE_CONNECTION_NAME}}'
      WORKINGDIR: '${{ parameters.WORKINGDIR }}'
      AKS_NAME: '${{ parameters.AKS_NAME }}'
      AKS_API_SERVER_URL: '${{ parameters.AKS_API_SERVER_URL }}'
      AKS_AZURE_DEVOPS_SA_CA_CRT: '${{ parameters.AKS_AZURE_DEVOPS_SA_CA_CRT }}'
      AKS_AZURE_DEVOPS_SA_TOKEN: '${{ parameters.AKS_AZURE_DEVOPS_SA_TOKEN }}'

  - task: AzureCLI@2
    displayName: Plan(generate state)
    inputs:
      azureSubscription: '${{ parameters.AZURE_PLAN_SERVICE_CONNECTION_NAME}}'
      addSpnToEnvironment: true
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      failOnStandardError: true
      workingDirectory: '${{ parameters.WORKINGDIR }}'
      inlineScript: |
        echo "##[section] üíà Start terraform plan to generate state with tf-env-folder=${{ parameters.TF_ENVIRONMENT_FOLDER }}"

        export cliendId=$(az ad sp show --id ${servicePrincipalId} --query "appId" -o tsv)

        echo "[INFO] Terraform setup variables"
        export ARM_USE_OIDC=true
        export ARM_OIDC_TOKEN=${idToken}
        export ARM_CLIENT_ID=${cliendId}
        export ARM_SUBSCRIPTION_ID=$(az account show --query id --output tsv)
        export ARM_TENANT_ID=$(az account show --query tenantId --output tsv)

        if [[ "${{ parameters.AKS_NAME }}" != "" ]]; then
          echo "[INFO] üöÄ Run terraform plan + kubernetes -> generate state"
          ./terraform.sh plan ${{ parameters.TF_ENVIRONMENT_FOLDER }} -var k8s_kube_config_path_prefix="$(pwd)" -out=tfplan-${{ parameters.TF_ENVIRONMENT_FOLDER }} -input=false -lock-timeout=3000s
        else
          echo "[INFO] üöÄ Run terraform plan -> generate state"
          ./terraform.sh plan ${{ parameters.TF_ENVIRONMENT_FOLDER }} -out=tfplan-${{ parameters.TF_ENVIRONMENT_FOLDER }} -input=false -lock-timeout=3000s
        fi

        echo "‚úÖ State output completed"

  - task: AzureCLI@2
    displayName: Apply Terraform
    inputs:
      azureSubscription: '${{ parameters.AZURE_APPLY_SERVICE_CONNECTION_NAME }}'
      addSpnToEnvironment: true
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      failOnStandardError: true
      workingDirectory: '${{ parameters.WORKINGDIR }}'
      inlineScript: |
        echo "##[section] üíà Start terraform apply with tfplan-${{ parameters.TF_ENVIRONMENT_FOLDER }}"

        export cliendId=$(az ad sp show --id ${servicePrincipalId} --query "appId" -o tsv)

        echo "[INFO] Terraform setup variables"
        export ARM_USE_OIDC=true
        export ARM_OIDC_TOKEN=${idToken}
        export ARM_CLIENT_ID=${cliendId}
        export ARM_SUBSCRIPTION_ID=$(az account show --query id --output tsv)
        export ARM_TENANT_ID=$(az account show --query tenantId --output tsv)

        if ! [[ -e "tfplan-${{ parameters.TF_ENVIRONMENT_FOLDER }}" ]]; then
          echo "‚ùå State file not exist"
          exit 1
        fi

        echo "üöÄ Run terraform apply output state"
        terraform apply -lock-timeout=3000s -auto-approve -input=false tfplan-${{ parameters.TF_ENVIRONMENT_FOLDER }}

  - task: AzureCLI@2
    displayName: Clean project
    condition: always()
    inputs:
      azureSubscription: '${{ parameters.AZURE_APPLY_SERVICE_CONNECTION_NAME }}'
      addSpnToEnvironment: true
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      failOnStandardError: true
      workingDirectory: '${{ parameters.WORKINGDIR }}'
      inlineScript: |
        echo "[INFO] Clean project"
        rm -rf .kube
        rm -rf .azure
        rm -rf config-${{ parameters.AKS_NAME }}
        rm -f tfplan-${{ parameters.TF_ENVIRONMENT_FOLDER }}
